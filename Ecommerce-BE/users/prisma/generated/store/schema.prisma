generator client {
  provider        = "prisma-client-js"
  output          = "./generated/store"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_STORE")
}

model CategoryConditionVoucher {
  id                String    @id @db.VarChar(50)
  categoryShortName String    @db.VarChar(50)
  createdAt         DateTime  @db.Timestamp(0)
  createdBy         String    @db.VarChar(50)
  updatedAt         DateTime? @db.Timestamp(0)
  updatedBy         String?   @db.VarChar(50)
  Voucher           Voucher[]

  @@index([categoryShortName], map: "categoryShortName")
  @@index([createdBy], map: "createdBy")
}

model PriceConditionVoucher {
  id        String    @id @db.VarChar(50)
  totalMin  Float?    @db.Float
  totalMax  Float?    @db.Float
  priceMin  Float?    @db.Float
  priceMax  Float?    @db.Float
  createdAt DateTime  @db.Timestamp(0)
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @db.Timestamp(0)
  updatedBy String?   @db.VarChar(50)
  Voucher   Voucher[]

  @@index([createdBy], map: "createdBy")
}

model ProductPromotion {
  id               String         @id @db.VarChar(50)
  productId        String         @db.VarChar(50)
  name             String         @db.VarChar(1000)
  image            String         @db.VarChar(500)
  category         String         @db.VarChar(50)
  quantity         Int
  currentQuantity  Int
  bought           Int?           @default(0)
  priceAfter       Float          @db.Float
  isDelete         Boolean        @default(false)
  createdAt        DateTime       @db.Timestamp(0)
  createdBy        String         @db.VarChar(50)
  updatedAt        DateTime?      @db.Timestamp(0)
  updatedBy        String?        @db.VarChar(50)
  storePromotionId String         @db.VarChar(50)
  salePromotionId  String         @db.VarChar(50)
  StorePromotion   StorePromotion @relation(fields: [storePromotionId], references: [id], onUpdate: Restrict, map: "ProductPromotion_ibfk_4")
  SalePromotion    SalePromotion  @relation(fields: [salePromotionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductPromotion_ibfk_5")

  @@index([createdBy], map: "createdBy")
  @@index([isDelete], map: "isDelete")
  @@index([productId], map: "productId")
  @@index([salePromotionId], map: "salePromotionId")
  @@index([storePromotionId], map: "storePromotionId")
}

model SalePromotion {
  id               String             @id @db.VarChar(50)
  title            String             @db.TinyText
  description      String?            @db.Text
  type             String             @db.VarChar(50)
  categoryId       String?            @db.VarChar(50)
  status           String             @db.VarChar(50)
  startDate        DateTime           @db.Timestamp(0)
  endDate          DateTime?          @db.Timestamp(0)
  createdAt        DateTime           @db.Timestamp(0)
  createdBy        String             @db.VarChar(50)
  updatedAt        DateTime?          @db.Timestamp(0)
  updatedBy        String?            @db.VarChar(50)
  ProductPromotion ProductPromotion[]
  StorePromotion   StorePromotion[]

  @@index([endDate], map: "endDate")
  @@index([startDate], map: "startDate")
  @@index([status], map: "status")
  @@index([type], map: "type")
}

model Store {
  id             String           @id @db.VarChar(50)
  name           String           @db.VarChar(255)
  image          String           @db.VarChar(255)
  location       String?          @db.VarChar(100)
  description    String?          @db.VarChar(1000)
  status         String           @db.VarChar(10)
  tax            String?          @db.VarChar(100)
  createdBy      String           @db.VarChar(50)
  updatedBy      String?          @db.VarChar(50)
  createdAt      DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?        @db.Timestamp(0)
  Rating         Rating[]
  StorePromotion StorePromotion[]
  UserViewStore  UserViewStore[]
  Voucher        Voucher[]

  @@index([createdAt], map: "createdAt")
  @@index([createdBy], map: "createdBy")
  @@index([name], map: "name")
  @@index([status], map: "status")
  @@index([updatedBy], map: "updatedBy")
}

model StorePromotion {
  id               String             @id @db.VarChar(50)
  salePromotionId  String             @db.VarChar(50)
  storeId          String             @db.VarChar(50)
  status           String             @db.VarChar(50)
  createdAt        DateTime           @db.Timestamp(0)
  createdBy        String             @db.VarChar(50)
  updatedAt        DateTime?          @db.Timestamp(0)
  updatedBy        String?            @db.VarChar(50)
  ProductPromotion ProductPromotion[]
  Store            Store              @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StorePromotion_ibfk_1")
  SalePromotion    SalePromotion      @relation(fields: [salePromotionId], references: [id], onUpdate: Restrict, map: "StorePromotion_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([salePromotionId], map: "salePromotionId")
  @@index([status], map: "status")
  @@index([storeId], map: "storeId")
}

model UserViewStore {
  id        String    @id @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  userId    String?   @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  Store     Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserViewStore_ibfk_1")

  @@index([storeId], map: "storeId")
  @@index([userId], map: "userId")
}

model Rating {
  id          String        @id @db.VarChar(50)
  storeId     String        @db.VarChar(50)
  orderId     String        @db.VarChar(50)
  stars       Float
  comment     String        @db.Text
  isReply     Boolean?      @default(false)
  createdBy   String        @db.VarChar(50)
  createdAt   DateTime      @db.Timestamp(0)
  updatedBy   String?       @db.VarChar(50)
  updatedAt   DateTime?     @db.Timestamp(0)
  Store       Store         @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_4")
  RatingReply RatingReply[]

  @@index([createdBy], map: "createdBy")
  @@index([isReply], map: "isReply")
  @@index([orderId], map: "orderId")
  @@index([stars], map: "stars")
  @@index([storeId], map: "storeId")
}

model RatingMaterial {
  id            String   @id @db.VarChar(50)
  url           String   @db.TinyText
  isPrimary     Boolean? @default(false)
  ratingId      String?  @db.VarChar(50)
  ratingReplyId String?  @db.VarChar(50)

  @@index([isPrimary], map: "isPrimary")
  @@index([ratingId], map: "ratingId")
}

model RatingReply {
  id             String    @id @db.VarChar(50)
  parentRatingId String    @db.VarChar(50)
  detail         String    @db.Text
  createdAt      DateTime  @db.Timestamp(0)
  createdBy      String    @db.VarChar(50)
  updatedAt      DateTime? @db.Timestamp(0)
  updatedBy      String?   @db.VarChar(50)
  Rating         Rating    @relation(fields: [parentRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RatingReply_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([parentRatingId], map: "parentRatingId")
}

model StoreRating {
  id        String    @id @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  one       Int       @default(0)
  two       Int       @default(0)
  three     Int       @default(0)
  four      Int       @default(0)
  five      Int       @default(0)
  total     Int       @default(0)
  average   Float     @default(0)
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model Voucher {
  id                       String                    @id @db.VarChar(50)
  code                     String                    @db.VarChar(100)
  title                    String                    @db.VarChar(255)
  description              String?                   @db.Text
  initQuantity             Int
  currentQuantity          Int
  status                   String                    @db.VarChar(20)
  type                     String                    @db.VarChar(20)
  storeId                  String?                   @db.VarChar(50)
  percent                  Float?
  maximum                  Int?
  startDate                DateTime                  @db.Timestamp(0)
  endDate                  DateTime?                 @db.Timestamp(0)
  createdBy                String                    @db.VarChar(50)
  createdAt                DateTime                  @default(now()) @db.Timestamp(0)
  updatedBy                String?                   @db.VarChar(50)
  updatedAt                DateTime?                 @db.Timestamp(0)
  categoryConditionId      String?                   @db.VarChar(50)
  priceConditionId         String?                   @db.VarChar(50)
  Store                    Store?                    @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_1")
  CategoryConditionVoucher CategoryConditionVoucher? @relation(fields: [categoryConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_2")
  PriceConditionVoucher    PriceConditionVoucher?    @relation(fields: [priceConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_3")

  @@index([categoryConditionId], map: "categoryConditionId")
  @@index([code], map: "code")
  @@index([endDate], map: "endDate")
  @@index([priceConditionId], map: "priceConditionId")
  @@index([startDate], map: "startDate")
  @@index([status], map: "status")
  @@index([storeId], map: "storeId")
  @@index([type], map: "type")
}
